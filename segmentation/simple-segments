#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Author: Eric Kow
# License: BSD3

"""
Crude EDU segmenter

Reads CSV files; for now justs output '&' delimited segments in lines

Quick start
-----------

"""

from   itertools import chain
import copy
import csv
import re
import sys

import segmentation
import educe.stac.util.stac_csv_format as stac_csv

def segment_row(t):
    segments = [segmentation.span_text(t,sp) for sp in segmentation.segment(t)]
    return join_segments(segments)

def get_text(row):
    return row['Text']

def replace_text(job, row):
    row2         = copy.copy(row)
    row2['Text'] = job(get_text(row))
    return row2

def join_segments(xs):
    return "&".join(xs)

import argparse

arg_parser = argparse.ArgumentParser(description='Segment into EDUs.')
arg_parser.add_argument('input_file' , metavar='FILE')
arg_parser.add_argument('output_file', metavar='FILE')
arg_parser.add_argument('--csv',
                        action='store_const',
                        const=True,
                        default=False,
                        dest='csv',
                        help='output csv file (replacing text with segmentations)')
arg_parser.add_argument('--no-seg',
                        action='store_const',
                        const=False,
                        default=True,
                        dest='segment',
                        help='do not do segmentation')
args=arg_parser.parse_args()

filename_in  = args.input_file
if args.segment:
    job=segment_row
else:
    job=lambda t:t

with open(filename_in, 'rb') as infile:
    reader = stac_csv.mk_csv_reader(infile)
    if args.csv:
        # csv library has built-in utf-8 encoding
        with open(args.output_file, 'wb') as outfile:
            writer = stac_csv.mk_csv_writer(outfile)
            writer.writeheader()
            for row in reader:
                writer.writerow(replace_text(job,row))
    else:
        with codecs.open(args.output_file, 'wb', encoding='utf-8') as outfile:
            segmented = [job(get_text(r)) for r in reader]
            print >> outfile, "\n".join(segmented)
